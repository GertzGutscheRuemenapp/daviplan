# Generated by Django 3.2.12 on 2022-05-19 14:37

import datentool_backend.base
import datentool_backend.utils.protect_cascade
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AgeGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_age', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(127)])),
                ('to_age', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(127)])),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_cut', models.BooleanField(default=False)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=3857)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AreaCell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('share_cell_of_area', models.FloatField()),
                ('share_area_of_cell', models.FloatField()),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datentool_backend.area')),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AreaLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_preset', models.BooleanField(default=False)),
                ('is_default_pop_level', models.BooleanField(default=False)),
                ('is_statistic_level', models.BooleanField(default=False)),
                ('is_pop_level', models.BooleanField(default=False)),
                ('max_population', models.FloatField(null=True)),
                ('population_cache_dirty', models.BooleanField(default=True)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='Capacity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.FloatField(default=1)),
                ('from_year', models.IntegerField(default=0)),
                ('to_year', models.IntegerField(default=99999999)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CutOffTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minutes', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='DemandRateSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('is_default', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, default='')),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='FieldType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ftype', models.CharField(choices=[('CLA', 'Classification'), ('NUM', 'Number'), ('STR', 'String')], max_length=3)),
                ('name', models.TextField()),
                ('is_preset', models.BooleanField(default=False)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='Infrastructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('order', models.IntegerField(default=0)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='LayerGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('order', models.IntegerField(default=0)),
                ('external', models.BooleanField(default=False)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='MapSymbol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(choices=[('line', 'Line'), ('circle', 'Circle'), ('square', 'Square'), ('star', 'Star')], default='circle', max_length=9)),
                ('fill_color', models.CharField(default='#FFFFFF', max_length=9)),
                ('stroke_color', models.CharField(default='#000000', max_length=9)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ModeVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.IntegerField(choices=[(1, 'zu Fuß'), (2, 'Fahrrad'), (3, 'Auto'), (4, 'ÖPNV')])),
                ('name', models.TextField()),
                ('meta', models.JSONField()),
                ('is_default', models.BooleanField(default=False)),
                ('cutoff_time', models.ManyToManyField(through='datentool_backend.CutOffTime', to='datentool_backend.Infrastructure')),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.JsonAttributes, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='PlanningProcess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('description', models.TextField(blank=True, default='')),
                ('allow_shared_change', models.BooleanField()),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='Population',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PopulationRaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('default', models.BooleanField(default=False)),
                ('filename', models.TextField(null=True)),
                ('srid', models.IntegerField(default=3035)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_access', models.BooleanField(default=False)),
                ('can_create_process', models.BooleanField(default=False)),
                ('can_edit_basedata', models.BooleanField(default=False)),
                ('settings', models.JSONField(default=dict)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Prognosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('description', models.TextField(blank=True, default='')),
                ('is_default', models.BooleanField(default=False)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='ProjectSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_area', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=3857)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Raster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='RasterCell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cellcode', models.TextField(validators=[django.core.validators.MaxLengthValidator(13)])),
                ('pnt', django.contrib.gis.db.models.fields.PointField(srid=3857)),
                ('poly', django.contrib.gis.db.models.fields.PolygonField(srid=3857)),
                ('raster', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.raster')),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Router',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('osm_file', models.TextField()),
                ('tiff_file', models.TextField()),
                ('gtfs_file', models.TextField()),
                ('build_date', models.DateField()),
                ('buffer', models.IntegerField()),
            ],
            bases=(datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='SiteSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('title', models.TextField(default='Datentool')),
                ('contact_mail', models.EmailField(blank=True, default='', max_length=254, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='')),
                ('primary_color', models.CharField(default='#50AF32', max_length=30)),
                ('secondary_color', models.CharField(default='#0390fc', max_length=30)),
                ('welcome_text', models.TextField(blank=True, default='Willkommen', null=True)),
                ('bkg_user', models.TextField(blank=True, default='', null=True)),
                ('regionalstatistik_user', models.TextField(blank=True, default='', null=True)),
                ('bkg_password', models.TextField(blank=True, default='', null=True)),
                ('regionalstatistik_password', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_type', models.CharField(choices=[('WFS', 'WFS Source'), ('FILE', 'File Source')], max_length=4)),
                ('date', models.DateField(null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('layer', models.TextField(blank=True, null=True)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Stop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=3857)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='Year',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(unique=True)),
                ('is_default', models.BooleanField(default=False)),
                ('is_prognosis', models.BooleanField(default=False)),
                ('is_real', models.BooleanField(default=False)),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='WMSLayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('active', models.BooleanField(default=False)),
                ('layer_name', models.TextField()),
                ('order', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True, default='')),
                ('url', models.URLField()),
                ('group', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.layergroup')),
            ],
            options={
                'abstract': False,
            },
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('quota_type', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('capacity_singular_unit', models.TextField(blank=True, null=True)),
                ('capacity_plural_unit', models.TextField(blank=True, null=True)),
                ('demand_singular_unit', models.TextField(blank=True, null=True)),
                ('demand_plural_unit', models.TextField(blank=True, null=True)),
                ('demand_name', models.TextField(blank=True, null=True)),
                ('demand_description', models.TextField(blank=True, null=True)),
                ('has_capacity', models.BooleanField(default=True)),
                ('facility_singular_unit', models.TextField(blank=True, null=True)),
                ('facility_article', models.TextField(blank=True, null=True)),
                ('facility_plural_unit', models.TextField(blank=True, null=True)),
                ('direction_way_relationship', models.IntegerField(choices=[(1, 'To'), (2, 'From')], default=1)),
                ('demand_type', models.IntegerField(choices=[(1, 'Quota'), (2, 'Frequency'), (3, 'Uniform')], default=1)),
                ('editable_by', models.ManyToManyField(blank=True, related_name='service_editable_by', to='datentool_backend.Profile')),
                ('infrastructure', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.infrastructure')),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='ScenarioService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('demandrateset', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.demandrateset')),
                ('scenario', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.scenario')),
                ('service', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.service')),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioMode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scenario', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.scenario')),
                ('variant', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.modevariant')),
            ],
        ),
        migrations.AddField(
            model_name='scenario',
            name='demandratesets',
            field=models.ManyToManyField(blank=True, related_name='scenario_service', through='datentool_backend.ScenarioService', to='datentool_backend.DemandRateSet'),
        ),
        migrations.AddField(
            model_name='scenario',
            name='planning_process',
            field=models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.planningprocess'),
        ),
        migrations.AddField(
            model_name='scenario',
            name='prognosis',
            field=models.ForeignKey(null=True, on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.prognosis'),
        ),
        migrations.CreateModel(
            name='RasterCellPopulationAgeGender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('age_group', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.agegroup')),
                ('cell', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.rastercell')),
                ('gender', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.gender')),
                ('population', models.ForeignKey(null=True, on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.population')),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RasterCellPopulation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('area', models.ManyToManyField(through='datentool_backend.AreaCell', to='datentool_backend.Area')),
                ('cell', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.rastercell')),
                ('popraster', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.populationraster')),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='populationraster',
            name='raster',
            field=models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.raster'),
        ),
        migrations.CreateModel(
            name='PopulationEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('age_group', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.agegroup')),
                ('area', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.area')),
                ('gender', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.gender')),
                ('population', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.population')),
            ],
        ),
        migrations.CreateModel(
            name='PopulationAreaLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('up_to_date', models.BooleanField(default=False)),
                ('area_level', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.arealevel')),
                ('population', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.population')),
            ],
        ),
        migrations.AddField(
            model_name='population',
            name='arealevels',
            field=models.ManyToManyField(through='datentool_backend.PopulationAreaLevel', to='datentool_backend.AreaLevel'),
        ),
        migrations.AddField(
            model_name='population',
            name='genders',
            field=models.ManyToManyField(blank=True, to='datentool_backend.Gender'),
        ),
        migrations.AddField(
            model_name='population',
            name='popraster',
            field=models.ForeignKey(null=True, on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.populationraster'),
        ),
        migrations.AddField(
            model_name='population',
            name='prognosis',
            field=models.ForeignKey(null=True, on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.prognosis'),
        ),
        migrations.AddField(
            model_name='population',
            name='year',
            field=models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.year'),
        ),
        migrations.CreateModel(
            name='PopStatistic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, related_name='statistics', to='datentool_backend.year')),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PopStatEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('immigration', models.FloatField()),
                ('emigration', models.FloatField()),
                ('births', models.FloatField()),
                ('deaths', models.FloatField()),
                ('area', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.area')),
                ('popstatistic', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.popstatistic')),
            ],
        ),
        migrations.AddField(
            model_name='planningprocess',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='datentool_backend.profile'),
        ),
        migrations.AddField(
            model_name='planningprocess',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='shared_with_users', to='datentool_backend.Profile'),
        ),
        migrations.CreateModel(
            name='PlaceUploadLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('text', models.TextField()),
                ('infrastructure', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.infrastructure')),
                ('user', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.profile')),
            ],
            options={
                'abstract': False,
            },
            bases=(datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='PlaceField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('is_label', models.BooleanField(default=None, null=True)),
                ('sensitive', models.BooleanField(default=False)),
                ('unit', models.TextField(blank=True, default='')),
                ('field_type', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.fieldtype')),
                ('infrastructure', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.infrastructure')),
            ],
            options={
                'unique_together': {('infrastructure', 'is_label'), ('infrastructure', 'name')},
            },
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=3857)),
                ('infrastructure', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.infrastructure')),
                ('scenario', models.ForeignKey(null=True, on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.scenario')),
                ('service_capacity', models.ManyToManyField(blank=True, related_name='place_services', through='datentool_backend.Capacity', to='datentool_backend.Service')),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='MatrixStopStop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minutes', models.FloatField()),
                ('from_stop', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, related_name='from_stop', to='datentool_backend.stop')),
                ('to_stop', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, related_name='to_stop', to='datentool_backend.stop')),
                ('variant', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.modevariant')),
            ],
        ),
        migrations.CreateModel(
            name='MatrixPlaceStop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minutes', models.FloatField()),
                ('place', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, related_name='place_stop', to='datentool_backend.place')),
                ('stop', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, related_name='stop_place', to='datentool_backend.stop')),
                ('variant', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.modevariant')),
            ],
        ),
        migrations.CreateModel(
            name='MatrixCellStop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minutes', models.FloatField()),
                ('cell', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, related_name='cell_stop', to='datentool_backend.rastercell')),
                ('stop', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, related_name='stop_cell', to='datentool_backend.stop')),
                ('variant', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.modevariant')),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MatrixCellPlace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minutes', models.FloatField()),
                ('cell', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, related_name='cell_place', to='datentool_backend.rastercell')),
                ('place', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, related_name='place_cell', to='datentool_backend.place')),
                ('variant', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.modevariant')),
            ],
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfrastructureAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allow_sensitive_data', models.BooleanField(default=False)),
                ('infrastructure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datentool_backend.infrastructure')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datentool_backend.profile')),
            ],
        ),
        migrations.AddField(
            model_name='infrastructure',
            name='accessible_by',
            field=models.ManyToManyField(blank=True, related_name='infrastructure_accessible_by', through='datentool_backend.InfrastructureAccess', to='datentool_backend.Profile'),
        ),
        migrations.AddField(
            model_name='infrastructure',
            name='editable_by',
            field=models.ManyToManyField(blank=True, related_name='infrastructure_editable_by', to='datentool_backend.Profile'),
        ),
        migrations.AddField(
            model_name='infrastructure',
            name='symbol',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='datentool_backend.mapsymbol'),
        ),
        migrations.CreateModel(
            name='FClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField()),
                ('value', models.TextField()),
                ('ftype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datentool_backend.fieldtype')),
            ],
            options={
                'ordering': ['order'],
            },
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='demandrateset',
            name='service',
            field=models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.service'),
        ),
        migrations.CreateModel(
            name='DemandRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(null=True)),
                ('age_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datentool_backend.agegroup')),
                ('demand_rate_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datentool_backend.demandrateset')),
                ('gender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datentool_backend.gender')),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datentool_backend.year')),
            ],
        ),
        migrations.AddField(
            model_name='cutofftime',
            name='infrastructure',
            field=models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.infrastructure'),
        ),
        migrations.AddField(
            model_name='cutofftime',
            name='mode_variant',
            field=models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.modevariant'),
        ),
        migrations.CreateModel(
            name='CapacityUploadLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('text', models.TextField()),
                ('service', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.service')),
                ('user', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.profile')),
            ],
            options={
                'abstract': False,
            },
            bases=(datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.AddField(
            model_name='capacity',
            name='place',
            field=models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.place'),
        ),
        migrations.AddField(
            model_name='capacity',
            name='scenario',
            field=models.ForeignKey(null=True, on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.scenario'),
        ),
        migrations.AddField(
            model_name='capacity',
            name='service',
            field=models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.service'),
        ),
        migrations.CreateModel(
            name='AreaUploadLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('text', models.TextField()),
                ('level', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.arealevel')),
                ('user', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.profile')),
            ],
            options={
                'abstract': False,
            },
            bases=(datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.CreateModel(
            name='AreaPopulationAgeGender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('age_group', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.agegroup')),
                ('area', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.area')),
                ('gender', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.gender')),
                ('population', models.ForeignKey(null=True, on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.population')),
            ],
        ),
        migrations.AddField(
            model_name='arealevel',
            name='source',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='datentool_backend.source'),
        ),
        migrations.AddField(
            model_name='arealevel',
            name='symbol',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='datentool_backend.mapsymbol'),
        ),
        migrations.CreateModel(
            name='AreaField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('is_label', models.BooleanField(default=None, null=True)),
                ('is_key', models.BooleanField(default=None, null=True)),
                ('area_level', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.arealevel')),
                ('field_type', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.fieldtype')),
            ],
            options={
                'unique_together': {('area_level', 'is_label'), ('area_level', 'is_key'), ('area_level', 'name')},
            },
            bases=(datentool_backend.base.DatentoolModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='areacell',
            name='cell',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datentool_backend.rastercellpopulation'),
        ),
        migrations.AddField(
            model_name='area',
            name='area_level',
            field=models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.arealevel'),
        ),
        migrations.CreateModel(
            name='PlaceAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('str_value', models.TextField(null=True)),
                ('num_value', models.FloatField(null=True)),
                ('class_value', models.ForeignKey(null=True, on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.fclass')),
                ('field', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.placefield')),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datentool_backend.place')),
            ],
            options={
                'unique_together': {('place', 'field')},
            },
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
        migrations.AlterUniqueTogether(
            name='capacity',
            unique_together={('place', 'service', 'from_year', 'scenario')},
        ),
        migrations.CreateModel(
            name='AreaAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('str_value', models.TextField(null=True)),
                ('num_value', models.FloatField(null=True)),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datentool_backend.area')),
                ('class_value', models.ForeignKey(null=True, on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.fclass')),
                ('field', models.ForeignKey(on_delete=datentool_backend.utils.protect_cascade.PROTECT_CASCADE, to='datentool_backend.areafield')),
            ],
            options={
                'unique_together': {('area', 'field')},
            },
            bases=(datentool_backend.base.DatentoolModelMixin, datentool_backend.base.NamedModel, models.Model),
        ),
    ]
