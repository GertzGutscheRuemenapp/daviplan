# VARIABLES, replace to match your local environment
# registered domain (+ optional sub-domain) where site will be available at
Define DOMAIN datentool.domainname.de
# the local port where the service is listening to
Define DATENTOOL_PORT 8092
# the directory the docker-compose.yml file defining the service is in
Define DATENTOOL_DIR /path/to/dockercompose/

# redirection of http calls to secure https
<VirtualHost *:80>
    ServerName ${DOMAIN}
    Redirect 301 / https://${DOMAIN}/
</VirtualHost>

# https
<VirtualHost *:443>
    ServerName ${DOMAIN}
    # your contact mail
    ServerAdmin Admin@admin.org

    # location of the log-file (HAS TO BE manually CREATED first!)
    ErrorLog /var/log/apache2/datentool/error.log

    # forward the request headers into the docker container
    RequestHeader set Host "${DOMAIN}"
    RequestHeader add X-Forwarded-Ssl on
    RequestHeader set X-Forwarded-For %{REMOTE_IP}e
    RequestHeader set X-Forwarded-Proto "https"
    RequestHeader set X-Forwarded-Port 443

    ProxyRequests Off
    ProxyPreserveHost On

    # exclude static and media directories (will be mapped to directories further down)
    ProxyPassMatch ^/static !
    ProxyPassMatch ^/media !
    # pass all requests to the service
    ProxyPass / http://localhost:${DATENTOOL_PORT}/

    # pass web socket requests
    RewriteEngine On
    RewriteCond %{HTTP:UPGRADE} ^WebSocket$ [NC,OR]
    RewriteCond %{HTTP:CONNECTION} ^Upgrade$ [NC]
    RewriteRule ^/?(.*) "ws://localhost:${DATENTOOL_PORT}/$1" [P,L]

    # map static and media routes to local directories (located where the docker-compose.yml is in)
    Alias "/static" "${DATENTOOL_DIR}/public/static"
    Alias "/media" "${DATENTOOL_DIR}/public/media"
    <Directory "${DATENTOOL_DIR}/public">
        Options FollowSymLinks
        Require all granted
    </Directory>

    SSLEngine On
    SSLProxyEngine On
    # SSL certificates
    # REPLACE with the paths to the actual files!!!
    SSLCertificateFile  /etc/ssl/certs/certificate.de.crt
    SSLCertificateKeyFile /etc/ssl/private/certificate.de.key
    # if the certificate is intermediate
    SSLCACertificateFile /etc/ssl/certs/intermediate.crt

    # allowed protocols and encryptions
    SSLProtocol all -SSLv2 -SSLv3 -TLSv1
    SSLHonorCipherOrder on
    SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256

</VirtualHost>